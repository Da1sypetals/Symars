/*

* Code generated by Symars. Thank you for using Symars!
  Symars is licensed under MIT licnese.
  Repository: https://github.com/Da1sypetals/Symars

* Computation code is not intended for manual editing.

* If you find an error,
  or if you believe Symars generates incorrect result,
  please raise an issue under our repo with minimal reproducible example.

*/

use faer::dbgf;
use symars_demonstration::sym::gen_mat_nalgebra;

#[inline]
pub fn many_many(a: f64, b: f64, c: f64, d: f64, e: f64, f: f64, g: f64, h: f64) -> f64 {
    ((-1.00000000000000000000000_f64)
        * (((3.14159265358979323846264_f64)
            * (((((d) * ((e).recip()))
                + ((((-1.00000000000000000000000_f64) * (h)) + ((f) * (g))).ln()))
            .abs())
            .cbrt())
            * ((c).cosh())
            * (if (0.473417601666430_f64)
                * (a)
                * ((a) + (b) + ((-1.00000000000000000000000_f64) * (c)))
                != 0_f64
            {
                ((((0.473417601666430_f64)
                    * (a)
                    * ((a) + (b) + ((-1.00000000000000000000000_f64) * (c))))
                    .sin())
                    / (0.473417601666430_f64)
                    * (a)
                    * ((a) + (b) + ((-1.00000000000000000000000_f64) * (c))))
            } else {
                1_f64
            }))
        .tanh()))
        + ((((((b)
            + (((c) + ((-1.00000000000000000000000_f64) * (a)))
                .powf((0.333333333333333333333333_f64) + (1.83928675521416113255185_f64))))
        .sqrt())
        .exp())
            + (((0.600000000000000000000000_f64)
                + ((4.23076923076923076923077_f64).powf(2.71828182845904523536029_f64))
                + (((c) + ((-1.00000000000000000000000_f64) * (a)))
                    .powf(0.250000000000000000000000_f64))
                + ((-1.00000000000000000000000_f64) * (0.577215664901532860606512_f64))
                + (((14.1444000000000_f64) * (a)).ln()))
            .sin()))
        .abs())
}

fn main() {
    let z = many_many(1.0, 1.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0);
    dbg!(z); // [src/main.rs:51:5] z = 3.095275956567902

    let mat = gen_mat_nalgebra::test_matrix(1.0, 1.0, 5.0, 1.0, 1.0, 1.0, 1., 1.0);
    dbg!(mat);
    dbg!(1.0_f64 - 1.0_f64);
    dbg!((1.0_f64 - 1.0_f64).signum());
    dbg!(0.0_f64.signum());
}
