// - Configurations -
#set page(
  paper: "us-letter",
  numbering: "1",
)
#set par(justify: true)
#set heading(numbering: "1.")

#set text(
  font: (
    "Libertinus Serif",
  ),
  size: 12pt,
)

#set text(top-edge: 0.7em, bottom-edge: -0.3em)
#set par(leading: 1em)

// - Configurations -


_This documentation is mostly generated by ChatGPT._
#heading(numbering: none)[Symars Documentation]



= Enum DType
- *Description:* The numeric type (`f32` or `f64`) used for computations in the generated Rust code.


= class GenScalar
- *Description:* Generates Rust functions for scalar SymPy expressions.
- *Constructor:*
```py
def __init__(self, dtype: DType, tol: float = 1e-9, debug: bool = False):
```
  - `dtype`: A `DType` instance specifying the numeric type.
  - `tol`: (Optional) Tolerance for float comparisons. Default: `1e-9`.
  - `debug`: (Optional) If `True`, enables debug output. Default: `False`.

- *Public Methods:*
  - `generate_func(func_name, expr)`: Generates a Rust function for a scalar expression.
  - `generate_func_given_params(func_name, expr, params)`: Generates a Rust function for a scalar expression with specified parameter names.


= class GenNalgebra
- *Description:* Generates Rust functions for SymPy matrices using the `nalgebra` crate.
- *Constructor:*
  - Same as `GenScalar`.

- *Public Methods:*
  - `generate(mat, func_name)`: Generates a Rust function for the matrix compatible with `nalgebra::SMatrix`.



= class GenArrayVec
- *Description:* Generates Rust functions for array-based vector representations.
- *Constructor:*
  - Same as `GenScalar`.

- *Public Methods:*
  - `generate(mat, func_name)`: Generates Rust code to store the matrix as a flattened vector.




= class GenFaer
- *Description:* Generates Rust functions for SymPy matrices using the `faer` crate.
- *Constructor:*
  - Same as `GenScalar`.

- *Public Methods:*
  - `generate(mat, func_name)`: Generates a Rust function for the matrix compatible with `faer::MatMut`.



= class GenFaerVec
- *Description:* Generates Rust functions for SymPy vector with the `faer` crate. 
  - Note that `faer::Col`, `faer::Row` and `faer::Mat` are different types.
- *Constructor:*
  - Same as `GenScalar`.

- *Public Methods:*
  - `generate(mat, func_name)`: Generates Rust code for SymPy vector representations.


= class GenSparse
- *Description:* Generates Rust functions for triplet representations for sparse matrices.
- *Constructor:*
  - Same as `GenScalar`.

- *Public Methods:*
  - `params(mat)`: Returns the parameters (symbols) required by the matrix.
  - `generate(mat, func_name)`: Generates Rust functions for sparse representations.



= class GenDense 
_This is not a user-faced class. Inspect to it only if you believe bug exists._
- *Description:* Generates Rust functions for dense matrices.
- *Constructor:*
  - Same as `GenScalar`.

- *Public Methods:*
  - `generate(mat, func_name)`: Generates Rust functions to represent the entries of a dense matrix.
