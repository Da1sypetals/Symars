// - Configurations -
#set page(
  paper: "us-letter",
  numbering: "1",
)
#set par(justify: true)
#set heading(numbering: "1.")

#set text(
  font: (
    "Libertinus Serif",
  ),
  size: 12pt,
)

#set text(top-edge: 0.7em, bottom-edge: -0.3em)
#set par(leading: 1em)

// - Configurations -



_This documentation is mostly generated by ChatGPT._
#heading(numbering: none)[Module Documentation]


= Class: `SymarsUni`

== Purpose
The `SymarsUni` class generates Rust code for a *scalar* in SymPy.

== Constructor

```python
SymarsUni(dtype: DType, tol: float = 1e-9, debug: bool = False)
```

- *Parameters:*
  - `dtype` (`DType`): Specifies the data type (`F32` or `F64`) for Rust code generation.
  - `tol` (`float`): Tolerance for floating-point equality checks (default: `1e-9`).
  - `debug` (`bool`): Enables debug mode for verbose output (default: `False`).


== Methods

1. `float_eq(self, a, b) -> bool`

   - Purpose: Checks if two floating-point numbers are approximately equal within the tolerance.
   - Parameters:
     - `a` (`float`): First number.
     - `b` (`float`): Second number.
   - Returns: `bool` indicating if the numbers are approximately equal.


2. `debug(self, *args, kw)`

   - Purpose: Prints debug messages if debug mode is enabled.
   - Parameters:
     - `*args`/`kw`: Variable arguments to be printed.
   - Output: Prints prefixed debug information when `debug_on` is `True`.


3. `literal_suffix(self) -> str` *(Property)*

   - Purpose: Provides the appropriate suffix for the type (`F32` or `F64`) to append to literals.
   - Returns: `str` representing the suffix (e.g., `_F32`).


4. `parse_symbol_or_literal(self, expr)`

   - Purpose: Parses input to determine if it is a symbol or a literal, converting it to a Rust-compatible representation.
   - Parameters:
     - `expr`: The input expression, which can be a SymPy `Symbol`, integer, or floating-point number.
   - Returns: `str` representing the parsed Rust-compatible code.
   - Raises: `ValueError` if the input is neither a symbol nor a literal.


5. `generate_func(self, name: str, expr)`

   - Purpose: Generates Rust function code for a given SymPy expression.
   - Parameters:
     - `name` (`str`): Name of the function to generate.
     - `expr`: A SymPy expression to translate into Rust code.
   - Returns: `str` containing the generated Rust function code.


6. `generate_func_given_params(self, name: str, expr, params)`

   - Purpose: Generates Rust function code for a SymPy expression with a specified parameter list.
   - Parameters:
     - `name` (`str`): Name of the function.
     - `expr`: A SymPy expression to translate.
     - `params` (`list[str]`): List of parameter names for the function.
   - Returns: `str` containing the generated Rust function code.
   - Notes: The user is responsible for ensuring the correctness of the parameter list.


7. `sympy_to_rust(self, expr)`

   - Purpose: Converts a SymPy expression to equivalent Rust code.
   - Parameters:
     - `expr`: A SymPy expression to translate.
   - Returns: `str` containing Rust code.
   - Supported Translations:
     - Mathematical functions (e.g., `sin`, `cos`, `tan`, `exp`, `log`).
     - Binary operations (e.g., addition, multiplication, power).
     - Unary operations (e.g., `sign`, `sqrt`).
     - Special cases (`Min`, `Max`).
   - Raises: `ValueError` for unsupported or invalid expression types.


8. `_generate_func_code(self, expr, name, params_list)`

   - Purpose: Internal helper to generate Rust function implementation code.
   - Parameters:
     - `expr`: SymPy expression to translate.
     - `name` (`str`): Function name.
     - `params_list` (`str`): Parameter declarations as a comma-separated string.
   - Returns: `str` containing the complete Rust function code.


== Attributes

- `dtype` (`DType`): The Rust data type (`F32` or `F64`).
- `tol` (`float`): Tolerance for floating-point comparisons.
- `debug_on` (`bool`): Debug mode toggle.



= Class: `SymarsDense`

== Purpose
The `SymarsDense` converts dense matrices from SymPy to rust, serving as backend to interface multiple rust crates, such as `nalgebra` which is documented below.



== Constructor

```python
SymarsDense(dtype: DType, tol: float = 1e-9, debug: bool = False)
```

- Parameters:
  - `dtype` (`DType`): Specifies the data type (`F32` or `F64`) for Rust code generation.
  - `tol` (`float`): Tolerance for floating-point equality checks (default: `1e-9`).
  - `debug` (`bool`): Enables debug mode for verbose output (default: `False`).



== Methods

1. `params(self, mat: sp.Matrix) -> list[str]`

   - Purpose: Extracts and returns the list of sorted symbolic parameters from a SymPy matrix.
   - Parameters:
     - `mat` (`sp.Matrix`): A SymPy matrix containing symbolic expressions.
   - Returns: `list[str]` of parameter names sorted alphabetically.



2. `generate(self, mat: sp.Matrix, func_name: str) -> dict`

   - Purpose: Generates Rust function implementations for each element of the matrix.
   - Parameters:
     - `mat` (`sp.Matrix`): A SymPy matrix whose elements will be converted to Rust code.
     - `func_name` (`str`): The base name for the functions generated for each matrix element.
   - Returns: `dict` mapping `(row, col)` indices to their respective Rust function implementation strings.



= Class: `SymarsNalgebra`

== Purpose
The `SymarsNalgebra` class integrates SymPy and the `nalgebra` Rust library to handle dense matrices and generate Rust code for matrix operations.



==  Constructor

```python
SymarsNalgebra(dtype: DType, tol: float = 1e-9, debug: bool = False)
```

- Parameters:
  - `dtype` (`DType`): Specifies the data type (`F32` or `F64`) for Rust code generation.
  - `tol` (`float`): Tolerance for floating-point equality checks (default: `1e-9`).
  - `debug` (`bool`): Enables debug mode for verbose output (default: `False`).


== Methods

1. `generate(self, mat: sp.Matrix, func_name: str) -> str`

   - Purpose: Generates Rust code for a matrix operation using `nalgebra`'s `SMatrix` type.
   - Parameters:
     - `mat` (`sp.Matrix`): A SymPy matrix whose elements will be converted to Rust code.
     - `func_name` (`str`): The base name for the Rust matrix function.
   - Returns: `str` containing the complete Rust code for the matrix operation, including individual element functions and the matrix assembly function.