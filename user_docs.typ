// - Configurations -
#set page(
  paper: "us-letter",
  numbering: "1",
)
#set par(justify: true)
#set heading(numbering: "1.")

#set text(
  font: (
    "Libertinus Serif",
  ),
  size: 12pt,
)

#set text(top-edge: 0.7em, bottom-edge: -0.3em)
#set par(leading: 1em)

// - Configurations -


_This documentation is mostly generated by ChatGPT._
#heading(numbering: none)[Symars Documentation]


= Enum: `DType`

== Description
The floating point precision you are using in computation.

== Variants
- `DType.F32`
- `DType.F64`


= Class: `SymarsUni`

== Description
The `SymarsUni` class generates Rust code for a *scalar* in SymPy.

== Constructor

```python
SymarsUni(dtype: DType, tol: float = 1e-9, debug: bool = False)
```

- *Parameters:*
  - `dtype` (`DType`): Specifies the data type (`F32` or `F64`) for Rust code generation.
  - `tol` (`float`): Tolerance for floating-point equality checks (default: `1e-9`).
  - `debug` (`bool`): Enables debug mode for verbose output (default: `False`).


== Methods

+ `generate_func(self, name: str, expr)`

   - Purpose: Generates Rust function code for a given SymPy expression.
   - Parameters:
     - `name` (`str`): Name of the function to generate.
     - `expr`: A SymPy expression to translate into Rust code.
   - Returns: `str` containing the generated Rust function code.


+ `generate_func_given_params(self, name: str, expr, params)`

   - Purpose: Generates Rust function code for a SymPy expression with a specified parameter list.
   - Parameters:
     - `name` (`str`): Name of the function.
     - `expr`: A SymPy expression to translate.
     - `params` (`list[str]`): List of parameter names for the function.
   - Returns: `str` containing the generated Rust function code.
   - Notes: The user is responsible for ensuring the correctness of the parameter list.



= Class: `SymarsDense`

== Description
The `SymarsDense` generates Rust code for dense matrices in SymPy, serving as backend to interface multiple rust crates, such as `nalgebra` documented below.



== Constructor

```python
SymarsDense(dtype: DType, tol: float = 1e-9, debug: bool = False)
```

- Parameters:
  - `dtype` (`DType`): Specifies the data type (`F32` or `F64`) for Rust code generation.
  - `tol` (`float`): Tolerance for floating-point equality checks (default: `1e-9`).
  - `debug` (`bool`): Enables debug mode for verbose output (default: `False`).



== Methods

+ `generate(self, mat: sp.Matrix, func_name: str) -> dict`

   - Purpose: Generates Rust function implementations for each element of the matrix.
   - Parameters:
     - `mat` (`sp.Matrix`): A SymPy matrix whose elements will be converted to Rust code.
     - `func_name` (`str`): The base name for the functions generated for each matrix element.
   - Returns: `dict` mapping `(row, col)` indices to their respective Rust function implementation strings.



= Class: `SymarsNalgebra`

== Description
The `SymarsNalgebra` class interfaces `SymarsDense` in format compatible with `nalgebra`, the Rust linear algebra crate.



==  Constructor

```python
SymarsNalgebra(dtype: DType, tol: float = 1e-9, debug: bool = False)
```

- Parameters:
  - `dtype` (`DType`): Specifies the data type (`F32` or `F64`) for Rust code generation.
  - `tol` (`float`): Tolerance for floating-point equality checks (default: `1e-9`).
  - `debug` (`bool`): Enables debug mode for verbose output (default: `False`).


== Methods

+ `generate(self, mat: sp.Matrix, func_name: str) -> str`

   - Purpose: Generates Rust code for a matrix operation using `nalgebra`'s `SMatrix` type.
   - Parameters:
     - `mat` (`sp.Matrix`): A SymPy matrix whose elements will be converted to Rust code.
     - `func_name` (`str`): The base name for the Rust matrix function.
   - Returns: `str` containing the complete Rust code for the matrix operation, including individual element functions and the matrix assembly function.